const backgroundImages = ['bg_1.webp', 'bg_2.webp', 'bg_3.webp', 'bg_4.webp'],
  selectedBg = backgroundImages[Math.floor(Math.random() * backgroundImages.length)],
  introBg = document.querySelector('.s-intro__bg');
introBg && (introBg.style.backgroundImage = `url('./img/${selectedBg}')`);
const themeToggleSwitch = document.querySelector('#change-th');
function detectColorScheme() {
  'dark' ===
    (localStorage.getItem('theme') ||
      (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light')) &&
    (document.body.classList.add('dark'), (themeToggleSwitch.checked = !0));
}
function toggleTheme(e) {
  const t = e.target.checked;
  localStorage.setItem('theme', t ? 'dark' : 'light'),
    document.body.classList.toggle('dark', t);
}
function detectIntroHidden() {
  'yes' === localStorage.getItem('hide-intro') &&
    (document.body.classList.add('hide-intro'), (hideIntroToggle.checked = !0));
}
function toggleIntroVisibility(e) {
  const t = e.target.checked;
  localStorage.setItem('hide-intro', t ? 'yes' : 'no'),
    document.body.classList.toggle('hide-intro', t);
}
detectColorScheme(),
  themeToggleSwitch?.addEventListener('change', toggleTheme),
  detectIntroHidden();
const hideIntroToggle = document.querySelector('#hide-tg');
hideIntroToggle?.addEventListener('change', toggleIntroVisibility);
const quotes = [
    {
      text: '"Practice without theory is more valuable than theory without practice."',
      author: '- Marcus Fabius Quintilian',
    },
    {
      text: '"You master the whole by learning its parts."',
      author: '- Seneca the Younger',
    },
    {
      text: '"Work is work, but in this life, we should do something useful too."',
      author: '- Henryk Jagodzinski',
    },
    {
      text: '"There’s never time to do it right, but always time to do it over."',
      author: '- Meskimen’s Law',
    },
    {
      text: '"Never put off till tomorrow what you can do the day after tomorrow."',
      author: '- Alphonse Allais',
    },
    {
      text: '"Those who can, do. Those who can’t, teach."',
      author: '- George Bernard Shaw',
    },
    {
      text: '"Thinking is the hardest work there is, which is probably why so few engage in it."',
      author: '- Henry Ford',
    },
    {
      text: '"It’s not the work itself that exhausts us, but the thought of it."',
      author: '- Marcus Fabius Quintilian',
    },
    {
      text: '"Do someone a favor, and it becomes your job."',
      author: '- Murphy’s Law',
    },
    {
      text: '"80% of success is showing up in the right place at the right time."',
      author: '- Woody Allen',
    },
    {
      text: '"It’s better to keep your mouth shut and appear stupid than to open it and remove all doubt."',
      author: '- Mark Twain',
    },
    {
      text: '"There is balance in everything. The energy you get equals the tasks you must do."',
      author: '- Boris Pasternak',
    },
    {
      text: '"Happiness isn’t in money — it’s in how much of it you have."',
      author: '- Mikhail Genin',
    },
    {
      text: '"A person needs nothing more than what nature gave them — except money."',
      author: '- Józef Bester',
    },
    {
      text: '"There is only one way to avoid criticism: do nothing, say nothing, and be nothing."',
      author: '- Aristotle',
    },
  ],
  quote = quotes[Math.floor(Math.random() * quotes.length)],
  quoteText = document.getElementById('bes'),
  quoteAuthor = document.getElementById('tes');
quoteText &&
  quoteAuthor &&
  ((quoteText.innerText = quote.text), (quoteAuthor.innerText = `– ${quote.author}`));
const faqItems = document.querySelectorAll('.js-faq-question');
function AutoCalcYear(e) {
  var t = document.getElementById('yearp').value,
    o = Math.round((parseFloat(t) / 365) * 100) / 100;
  (document.getElementById('dayp').value = o),
    isNaN(o) && (document.getElementById('dayp').value = '');
}
function AutoCalcDay(e) {
  var t = document.getElementById('dayp').value,
    o = Math.round(365 * parseFloat(t) * 100) / 100;
  (document.getElementById('yearp').value = o),
    isNaN(o) && (document.getElementById('yearp').value = '');
}
faqItems.forEach(e => {
  e.addEventListener('click', () => {
    e.classList.toggle('active');
    e.nextElementSibling?.classList.toggle('open');
  });
});
const form = document.getElementById('tg'),
  alertBox = document.getElementById('alert'),
  VERCEL_API_ENDPOINT = '',
  submitButton = document.getElementById('submit-button'),
  buttonSpinner = document.getElementById('button-spinner'),
  buttonText = submitButton.querySelector('.button-text');
function hideAlert() {
  (alertBox.style.display = 'none'),
    (alertBox.className = 'alert-box'),
    (alertBox.innerHTML = '');
}
function setLoading(e) {
  (submitButton.disabled = e),
    e
      ? ((buttonSpinner.style.display = 'inline-block'),
        (buttonText.style.visibility = 'hidden'),
        submitButton.setAttribute('aria-busy', 'true'))
      : ((buttonSpinner.style.display = 'none'),
        (buttonText.style.visibility = 'visible'),
        submitButton.removeAttribute('aria-busy'));
}
form &&
  form.addEventListener('submit', async e => {
    e.preventDefault(), setLoading(!0);
    const t = { name: form.name.value, type: form.type.value, text: form.text.value };
    hideAlert();
    try {
      const e = await axios.post('', t);
      200 === e.status && e.data.success
        ? (form.reset(),
          (alertBox.className = 'alert-box alert-box--success'),
          (alertBox.innerHTML =
            "<p>Message sent successfully. Thank you :3</p><span class='alert-box__close'></span>"))
        : ((alertBox.className = 'alert-box alert-box--error'),
          (alertBox.innerHTML = `<p>Server error:<br>${
            e.data.error || 'Unknown error'
          }</p><span class='alert-box__close'></span>`));
    } catch (e) {
      let t = 'Unknown error';
      e.response && e.response.data && e.response.data.error
        ? (t = e.response.data.error)
        : e.message && (t = e.message),
        (alertBox.className = 'alert-box alert-box--error'),
        (alertBox.innerHTML = `<p>Error:<br>${t}</p><span class='alert-box__close'></span>`);
    } finally {
      (alertBox.style.display = 'block'), setTimeout(hideAlert, 3e3), setLoading(!1);
    }
  });
const highlightToggle = document.querySelector('#high-tg'),
  copyMenu = document.querySelector('.s-copy'),
  copyWithoutSignBtn = document.querySelector('.s-copy_without-sign'),
  copyWithSignBtn = document.querySelector('.s-copy_with-sign'),
  copySuccessMessage = document.querySelector('.s-copy_success'),
  greetingToggleItem = document.querySelector('.s-copy_hand'),
  greetingToggleCheckbox = document.querySelector('#hand');
function initHighlightToggle() {
  const e = 'yes' === localStorage.getItem('highlight');
  (highlightToggle.checked = e),
    highlightToggle.addEventListener('change', e => {
      localStorage.setItem('highlight', e.target.checked ? 'yes' : 'no');
    });
}
function setupSelectableElements() {
  document.querySelectorAll('[data-selectable]').forEach(e => {
    e.addEventListener('click', () => {
      if (!highlightToggle.checked) return;
      const t = window.getSelection(),
        o = document.createRange();
      o.selectNode(e), t.removeAllRanges(), t.addRange(o);
    });
  });
}
function getSelectedTextData() {
  const e = window.getSelection();
  if (!e.rangeCount) return { text: '', rect: null };
  const t = e.getRangeAt(0),
    o = e.toString().trim();
  return o ? { text: o, rect: t.getBoundingClientRect() } : { text: '', rect: null };
}
function toggleCopyMenu() {
  const { rect: e } = getSelectedTextData();
  e && e.width > 0 && e.height > 0 ? openCopyMenu() : closeCopyMenu();
}
function openCopyMenu() {
  const { rect: e } = getSelectedTextData();
  e &&
    ((copyMenu.style.left = `${e.left + window.pageXOffset}px`),
    (copyMenu.style.top = e.top + window.pageYOffset - 50 + 'px'),
    copyMenu.classList.remove('s-copy--visible'),
    copyMenu.offsetWidth,
    copyMenu.classList.add('s-copy--visible'),
    resetCopyMenu());
}
function closeCopyMenu() {
  copyMenu.classList.contains('s-copy--visible') &&
    (copyMenu.classList.remove('s-copy--visible'),
    copyMenu.classList.add('s-copy--hiding'),
    copyMenu.addEventListener(
      'animationend',
      () => {
        copyMenu.classList.remove('s-copy--hiding');
      },
      { once: !0 },
    ));
}
function resetCopyMenu() {
  (copySuccessMessage.style.display = 'none'),
    (copyWithoutSignBtn.style.display = 'flex'),
    (copyWithSignBtn.style.display = 'flex'),
    (greetingToggleItem.style.display = 'flex');
}
function showCopySuccessOnly() {
  (copySuccessMessage.style.display = 'flex'),
    (copyWithoutSignBtn.style.display = 'none'),
    (copyWithSignBtn.style.display = 'none'),
    (greetingToggleItem.style.display = 'none');
}
function handleScrollHideSelection() {
  const e = window.getSelection();
  if (!e.rangeCount) return;
  const t = e.getRangeAt(0).getBoundingClientRect();
  (t.bottom < 0 ||
    t.top > window.innerHeight ||
    t.right < 0 ||
    t.left > window.innerWidth) &&
    window.getSelection().removeAllRanges();
}
let isClickListenerActive = !1;
function handleSelectionChange() {
  const { text: e } = getSelectedTextData();
  e
    ? (toggleCopyMenu(),
      isClickListenerActive ||
        (document.body.addEventListener('click', onClickOutside),
        (isClickListenerActive = !0)))
    : (window.getSelection().removeAllRanges(),
      isClickListenerActive &&
        (document.body.removeEventListener('click', onClickOutside),
        (isClickListenerActive = !1)));
}
function onClickOutside(e) {
  e.target.closest('.s-copy') ||
    e.target.closest('[data-selectable]') ||
    (window.getSelection().removeAllRanges(),
    document.body.removeEventListener('click', onClickOutside),
    (isClickListenerActive = !1));
}
async function copyText(e = !1) {
  const { text: t } = getSelectedTextData();
  if (!t) return;
  const o = greetingToggleCheckbox?.checked;
  let n = o ? 'Hi!\n\n' : '';
  (n += t),
    e &&
      (n +=
        '\n\nBest regards,\nSupport\nmobile.: (100)000-00-00\ne-mail: email@site.com');
  try {
    await navigator.clipboard.writeText(n),
      showCopySuccessOnly(),
      setTimeout(() => {
        window.getSelection().removeAllRanges();
      }, 1e3);
  } catch (e) {}
}
initHighlightToggle(), setupSelectableElements();
let debounceTimeout = null;
function toggleCopyMenuDebounced() {
  debounceTimeout && clearTimeout(debounceTimeout),
    (debounceTimeout = setTimeout(toggleCopyMenu, 150));
}
document.addEventListener('selectionchange', toggleCopyMenuDebounced),
  document.addEventListener('copy', () => copyText(!1)),
  copyWithoutSignBtn?.addEventListener('click', () => copyText(!1)),
  copyWithSignBtn?.addEventListener('click', () => copyText(!0)),
  window.addEventListener('scroll', handleScrollHideSelection),
  (function (e) {
    !(function () {
      const t = anime.timeline({
        easing: 'easeInOutCubic',
        duration: 800,
        autoplay: !1,
      });
      t
        .add({
          targets: '#loader',
          opacity: 0,
          duration: 1e3,
          begin: () => window.scrollTo(0, 0),
        })
        .add({
          targets: '#preloader',
          opacity: 0,
          complete: () => {
            const e = document.querySelector('#preloader');
            e && ((e.style.visibility = 'hidden'), (e.style.display = 'none'));
          },
        })
        .add(
          { targets: ['.s-header__logo', '.s-header__menu-toggle'], opacity: [0, 1] },
          '-=200',
        )
        .add(
          {
            targets: ['.s-intro__title', '.s-intro__pretitle', '.s-intro__more'],
            translateY: [100, 0],
            opacity: [0, 1],
            delay: anime.stagger(200),
          },
          '-=400',
        )
        .add(
          {
            targets: ['.s-intro__social', '.s-intro__scroll'],
            opacity: [0, 1],
            delay: anime.stagger(200),
          },
          '-=200',
        ),
        document.querySelector('#preloader') &&
          (e.classList.add('ss-preload'),
          window.addEventListener('load', () => {
            e.classList.remove('ss-preload'), e.classList.add('ss-loaded'), t.play();
          }));
    })(),
      new Rellax('.rellax'),
      (function () {
        const e = document.querySelector('.s-header__menu-toggle');
        e &&
          window.addEventListener('scroll', () => {
            window.scrollY > 500
              ? e.classList.add('opaque')
              : e.classList.remove('opaque');
          });
      })(),
      (function () {
        const e = document.querySelectorAll('[data-animate-block]');
        e.length &&
          window.addEventListener('scroll', function () {
            const t = window.innerHeight;
            e.forEach(e => {
              const o = e.getBoundingClientRect(),
                n = o.top,
                s = o.bottom,
                i = (Math.min(s, t) - Math.max(n, 0)) / o.height,
                a = e.classList.contains('ss-animated');
              i >= 0.2 &&
                !a &&
                anime({
                  targets: e.querySelectorAll('[data-animate-el]'),
                  opacity: [0, 1],
                  translateY: [100, 0],
                  delay: anime.stagger(200, { start: 200 }),
                  duration: 800,
                  easing: 'easeInOutCubic',
                  begin: () => e.classList.add('ss-animated'),
                });
            });
          });
      })(),
      (function () {
        const e = document.body,
          t = document.querySelector('.s-header__menu-toggle'),
          o = document.querySelectorAll('.feedback'),
          n = document.querySelector('.settings'),
          s = document.querySelector('.percent'),
          i = document.querySelector('.s-header__nav'),
          a = document.querySelector('.s-settings'),
          c = document.querySelector('.s-feedback'),
          r = document.querySelector('.s-percentage'),
          l = document.querySelectorAll('.close-mark'),
          d = document.querySelector('.close-perc');
        t &&
          i &&
          n &&
          a &&
          o.length &&
          c &&
          s &&
          r &&
          (t.addEventListener('click', t => {
            t.preventDefault(),
              t.stopPropagation(),
              e.classList.add('menu-is-open'),
              e.classList.remove('settings-is-open', 'feedback-is-open');
          }),
          n.addEventListener('click', t => {
            t.preventDefault(),
              t.stopPropagation(),
              e.classList.add('settings-is-open'),
              e.classList.remove('menu-is-open');
          }),
          o.forEach(t => {
            t.addEventListener('click', t => {
              if (
                (t.preventDefault(),
                t.stopPropagation(),
                !document.querySelector('script[src*="axios"]'))
              ) {
                const t = document.createElement('script');
                (t.src =
                  'https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js'),
                  e.appendChild(t);
              }
              e.classList.add('feedback-is-open'), e.classList.remove('menu-is-open');
            });
          }),
          s.addEventListener('click', t => {
            t.preventDefault(),
              t.stopPropagation(),
              e.classList.add('percentage-is-open');
          }),
          d &&
            d.addEventListener('click', t => {
              t.preventDefault(),
                t.stopPropagation(),
                e.classList.remove('percentage-is-open');
            }),
          l.forEach(t => {
            t.addEventListener('click', t => {
              t.preventDefault(),
                t.stopPropagation(),
                e.classList.remove(
                  'menu-is-open',
                  'feedback-is-open',
                  'settings-is-open',
                );
            });
          }),
          e.addEventListener('click', t => {
            t.target.closest('.s-header__nav, .s-popup, .s-header__menu-toggle') ||
              (e.classList.remove('menu-is-open'),
              e.classList.remove('settings-is-open'),
              e.classList.remove('feedback-is-open'));
          }),
          i &&
            i.querySelectorAll('a').forEach(t => {
              t.addEventListener('click', () => {
                e.classList.remove('menu-is-open');
              });
            }));
      })(),
      document.querySelectorAll('.alert-box').forEach(e => {
        e.addEventListener('click', t => {
          t.target.matches('.alert-box__close') &&
            (t.stopPropagation(),
            e.classList.add('hideit'),
            setTimeout(() => {
              e.style.display = 'none';
            }, 500));
        });
      }),
      (function () {
        const e = document.querySelector('.ss-go-top');
        function t() {
          window.scrollY >= 900
            ? e.classList.add('link-is-visible')
            : e.classList.remove('link-is-visible');
        }
        e && (t(), window.addEventListener('scroll', t));
      })();
  })(document.documentElement);
